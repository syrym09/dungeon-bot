import random
import json
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# =============================
# –ë–∞–∑–∞ –∏–≥—Ä–æ–∫–æ–≤
# =============================
conn = sqlite3.connect("dungeon.db")
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    floor INTEGER,
    weapon INTEGER,
    difficulty TEXT,
    legend_fragments TEXT,
    coins INTEGER,
    inventory TEXT
)
""")
conn.commit()

# =============================
# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
# =============================
mobs = ["–°–∫–µ–ª–µ—Ç", "–ì–æ–±–ª–∏–Ω", "–û—Ä–∫", "–ö—Ä—ã—Å–∏–Ω—ã–π –∫–æ—Ä–æ–ª—å", "–ü—Ä–∏–∑—Ä–∞–∫"]
mini_bosses = ["–ü—Ä–∏–∑—Ä–∞–∫ –ì–µ—Ä–æ—è", "–î—Ä–µ–≤–Ω–∏–π –ß–µ—à—É–π—á–∞—Ç—ã–π –°—Ç—Ä–∞–∂", "–ê–ª—Ç–∞—Ä–Ω—ã–π –•—Ä–∞–Ω–∏—Ç–µ–ª—å", "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π –ë–∞—Ä–¥", "–¢–µ–Ω—å –ê–±—Å–æ–ª—é—Ç–∞"]
all_fragments = set(mini_bosses)

hints = {
    "–ü—Ä–∏–∑—Ä–∞–∫ –ì–µ—Ä–æ—è": "–Ø –ø–∞–ª –≤ –±–∏—Ç–≤–µ... –Ω–æ –º–æ–π –∫–ª–∏–Ω–æ–∫ –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
    "–î—Ä–µ–≤–Ω–∏–π –ß–µ—à—É–π—á–∞—Ç—ã–π –°—Ç—Ä–∞–∂": "–ß–µ—à—É—è —Ö—Ä–∞–Ω–∏—Ç —Å–µ–∫—Ä–µ—Ç –º–µ—á–∞.",
    "–ê–ª—Ç–∞—Ä–Ω—ã–π –•—Ä–∞–Ω–∏—Ç–µ–ª—å": "–ö–ª–∏–Ω–æ–∫ —Å–ø—Ä—è—Ç–∞–Ω —Ç–∞–º, –≥–¥–µ –æ–≥–æ–Ω—å –∏ —Ç—å–º–∞ —Å–ª–∏–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ.",
    "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π –ë–∞—Ä–¥": "–ì–µ—Ä–æ–π –∂–∏–≤—ë—Ç –≤ –∫–ª–∏–Ω–∫–µ. –ù–∞–π–¥–∏ –µ–≥–æ.",
    "–¢–µ–Ω—å –ê–±—Å–æ–ª—é—Ç–∞": "–î–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–π–¥—ë—à—å –º–µ—á ‚Äî –∫–æ–Ω–µ—Ü –Ω–µ–∏–∑–±–µ–∂–µ–Ω!"
}

difficulties = {
    "easy": {"mob_chance": 0.8, "boss_chance": 0.2},
    "normal": {"mob_chance": 0.7, "boss_chance": 0.3},
    "hard": {"mob_chance": 0.6, "boss_chance": 0.4},
    "master": {"mob_chance": 0.5, "boss_chance": 0.5},
}

common_items = ["–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", "–ú–∞–ª—ã–π –º–µ—á", "–©–∏—Ç –Ω–æ–≤–∏—á–∫–∞", "–ö–∏–Ω–∂–∞–ª —Ä–∞–∑–≤–µ–¥—á–∏–∫–∞"]
rare_items = ["–û–≥–Ω–µ–Ω–Ω—ã–π –º–µ—á", "–ê–º—É–ª–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏", "–ö–∏—Ä–∞—Å–∞ –≥–µ—Ä–æ—è", "–ü–æ—Å–æ—Ö —à–∞–º–∞–Ω–∞"]
legendary_items = ["–ö—É—Å–æ–∫ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º–µ—á–∞", "–ö—Ä—ã–ª—å—è –¥—Ä–∞–∫–æ–Ω–∞", "–ü–æ—Å–æ—Ö –ê—Ä—Ö–∏–º–∞–≥–∞", "–ö–æ—Ä–æ–Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö", "–ú–µ—á –í–µ—á–Ω–æ–π –°–∏–ª—ã"]

# =============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================
def get_player(user_id):
    cur.execute("SELECT * FROM players WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if row:
        return {
            "user_id": row[0],
            "floor": row[1],
            "weapon": row[2],
            "difficulty": row[3],
            "legend_fragments": set(json.loads(row[4])),
            "coins": row[5],
            "inventory": json.loads(row[6])
        }
    else:
        cur.execute("INSERT INTO players VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (user_id, 1, 0, "normal", json.dumps([]), 1000, json.dumps([])))
        conn.commit()
        return get_player(user_id)

def save_player(player):
    cur.execute("""
    UPDATE players SET floor=?, weapon=?, difficulty=?, legend_fragments=?, coins=?, inventory=?
    WHERE user_id=?
    """, (player["floor"], player["weapon"], player["difficulty"],
          json.dumps(list(player["legend_fragments"])), player["coins"],
          json.dumps(player["inventory"]), player["user_id"]))
    conn.commit()

# =============================
# –°—É–Ω–¥—É–∫–∏ —Å —à–∞–Ω—Å–∞–º–∏
# =============================
def get_reward(box_type):
    roll = random.uniform(0, 100)
    if box_type == "–æ–±—ã—á–Ω—ã–π":
        if roll <= 80:
            return random.choice(common_items)
        else:
            return random.choice(rare_items)
    elif box_type == "–∑–æ–ª–æ—Ç–æ–π":
        if roll <= 60:
            return random.choice(common_items)
        elif roll <= 90:
            return random.choice(rare_items)
        else:
            return random.choice(legendary_items[:-1])
    elif box_type == "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π":
        if roll <= 40:
            return random.choice(common_items)
        elif roll <= 80:
            return random.choice(rare_items)
        elif roll <= 99.5:
            return random.choice(legendary_items[:-1])
        else:
            return "–ú–µ—á –í–µ—á–Ω–æ–π –°–∏–ª—ã"
    else:
        return "–û—à–∏–±–∫–∞!"

def open_box(player, box_type):
    cost_dict = {"–æ–±—ã—á–Ω—ã–π":100, "–∑–æ–ª–æ—Ç–æ–π":300, "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π":700}
    cost = cost_dict.get(box_type, 0)
    if player["coins"] < cost:
        return "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç!"
    player["coins"] -= cost
    reward = get_reward(box_type)
    player["inventory"].append(reward)
    save_player(player)
    return f"üéÅ –¢—ã –æ—Ç–∫—Ä—ã–ª {box_type} —Å—É–Ω–¥—É–∫ –∏ –ø–æ–ª—É—á–∏–ª: {reward}\nüí∞ –ë–∞–ª–∞–Ω—Å: {player['coins']} –º–æ–Ω–µ—Ç"

# =============================
# –ü–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Kaspi
# =============================
pending_payments = {}  # user_id: {"box": "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "amount": 200, "paid": False}
KASPI_QR_URL = "https://kaspi.kz/pay/7715275280"

@dp.message_handler(commands=["buy"])
async def cmd_buy(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–û–±—ã—á–Ω—ã–π —Å—É–Ω–¥—É–∫ (200‚Ç∏)", "–ó–æ–ª–æ—Ç–æ–π —Å—É–Ω–¥—É–∫ (500‚Ç∏)", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—É–Ω–¥—É–∫ (1000‚Ç∏)")
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–Ω–¥—É–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Kaspi. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è QR –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=keyboard)

@dp.message_handler(lambda message: "—Å—É–Ω–¥—É–∫" in message.text.lower())
async def select_box(message: types.Message):
    user_id = message.from_user.id
    text = message.text.lower()
    if "–æ–±—ã—á–Ω—ã–π" in text:
        pending_payments[user_id] = {"box": "–æ–±—ã—á–Ω—ã–π", "amount": 200, "paid": False}
    elif "–∑–æ–ª–æ—Ç–æ–π" in text:
        pending_payments[user_id] = {"box": "–∑–æ–ª–æ—Ç–æ–π", "amount": 500, "paid": False}
    elif "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π" in text:
        pending_payments[user_id] = {"box": "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "amount": 1000, "paid": False}
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–π —Å—É–Ω–¥—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    qr_keyboard = InlineKeyboardMarkup()
    qr_button = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Kaspi", url=KASPI_QR_URL)
    qr_keyboard.add(qr_button)

    await message.answer(
        f"üì≤ –°—É–Ω–¥—É–∫: {pending_payments[user_id]['box']}\n–°—É–º–º–∞: {pending_payments[user_id]['amount']}‚Ç∏\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Kaspi QR –∏ –æ–ø–ª–∞—Ç–∏—Ç—å. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏ /paid",
        reply_markup=qr_keyboard
    )

@dp.message_handler(commands=["paid"])
async def cmd_paid(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pending_payments:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –ø–æ–∫—É–ø–∫–∏.")
        return

    payment = pending_payments[user_id]
    payment["paid"] = True

    # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—ë–º —Å—É–Ω–¥—É–∫
    player = get_player(user_id)
    result = open_box(player, payment["box"])
    await message.answer(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\nüéÅ –¢–≤–æ–π —Å—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç:\n{result}")

    # —É–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    del pending_payments[user_id]

# =============================
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã
# =============================
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    player = get_player(message.from_user.id)
    await message.answer(f"‚öîÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–¥–∑–µ–º–µ–ª—å–µ! –£ —Ç–µ–±—è {player['coins']} –º–æ–Ω–µ—Ç.\n–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: /easy /normal /hard /master")

@dp.message_handler(commands=["easy","normal","hard","master"])
async def cmd_difficulty(message: types.Message):
    diff = message.text[1:]
    player = get_player(message.from_user.id)
    player["difficulty"] = diff
    save_player(player)
    await message.answer(f"üéÆ –°–ª–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {diff}. –ù–∞–ø–∏—à–∏ /next —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")

@dp.message_handler(commands=["next"])
async def cmd_next(message: types.Message):
    player = get_player(message.from_user.id)
    floor = player["floor"]
    diff = player["difficulty"]
    settings = difficulties[diff]

    if floor >= 50:
        if player["weapon"]:
            await message.answer("üî• –¢—ã –ø–æ–±–µ–¥–∏–ª –ê–±
